# Git提交规范

## 提交信息格式

提交信息应遵循以下格式：

```
<类型>(<作用域>): <简短描述>

<详细描述>

<关联问题>
```

## 类型（Type）

- `feat`：新功能
- `fix`：修复bug
- `docs`：文档更新
- `style`：代码格式调整（不影响代码运行的变动）
- `refactor`：代码重构（即不是新增功能，也不是修改bug的代码变动）
- `perf`：优化相关，如提升性能、体验等
- `test`：增加测试
- `chore`：构建过程或辅助工具的变动
- `revert`：回滚到上一个版本

## 作用域（Scope）

作用域说明本次提交影响的范围，比如：data、user、auth、api等。

## 简短描述（Subject）

- 简明扼要描述本次提交的内容
- 使用第一人称现在时态，如："change"而非"changed"或"changes"
- 首字母不要大写
- 结尾不加句号

## 详细描述（Body）

- 详细描述改动的动机，以及与之前行为的对比
- 可使用多行描述

## 关联问题（Footer）

- 关闭Issue：`Closes #123, #456`
- 关联Issue：`Refs #123, #456`

## 示例

```
feat(user): 添加用户登录功能

实现用户名密码登录和第三方登录功能，支持微信和QQ登录

Closes #123
```

```
fix(api): 修复获取用户信息接口返回错误

修复当用户不存在时，API返回500错误而非404的问题

Closes #456
```

## 分支管理

- `main/master`：主分支，保持稳定可发布状态
- `develop`：开发分支，最新开发进度
- `feature/*`：功能分支，用于开发新功能
- `hotfix/*`：热修复分支，用于修复线上紧急bug
- `release/*`：发布分支，用于版本发布准备 